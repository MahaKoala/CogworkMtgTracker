'use strict';
var { defineSupportCode } = require('cucumber');
var assert = require('assert');

defineSupportCode(function (context) {
  var setWorldConstructor = context.setWorldConstructor;
  var Given = context.Given
  var When = context.When
  var Then = context.Then
  ///// Your World /////
  //
  // Call 'setWorldConstructor' with to your custom world (optional)
  //

  // var CustomWorld = function() {};

  // CustomWorld.prototype.variable = 0;

  // CustomWorld.prototype.setTo = function(number) {
  //   this.variable = parseInt(number);
  // };

  // CustomWorld.prototype.incrementBy = function(number) {
  //   this.variable += parseInt(number);
  // };

  // setWorldConstructor(CustomWorld);

  ///// Your step definitions /////
  //
  // use 'Given', 'When' and 'Then' to declare step definitions
  //

  // Given(/^a variable set to (\d+)$/, function(number) {
  //   this.setTo(number);
  // });

  // When(/^I increment the variable by (\d+)$/, function(number) {
  //   this.incrementBy(number);
  // });

  // Then(/^the variable should contain (\d+)$/, function(number) {
  //   if (this.variable != parseInt(number))
  //     throw new Error('Variable should contain ' + number +
  //       ' but it contains ' + this.variable + '.');
  // });

  Given('a variable has value {x}', function (x) {
    // Write code here that turns the phrase above into concrete actions
    this.variableX = parseInt(x);
  });

  When('added {y}', function (y) {
    // Write code here that turns the phrase above into concrete actions
    this.variableY = parseInt(y);
  });

  Then('the variable has value {z}', function (z) {
    // Write code here that turns the phrase above into concrete actions
    var actual = (this.variableX + this.variableY);
    assert.equal(actual, parseInt(z), "The value of variable was unexpected.");
  });



});